from graphviz import Digraph  # type: ignore
from jinja2 import BaseLoader, Environment, Template
from pathlib import Path
import sqlean as sqlite3  # type: ignore
from personal_graph.models import Edge as Edge, Node as Node
from personal_graph.database.db import DB as DB
from typing import Any, Callable, Dict, List, Tuple, Optional

CursorExecFunction = Callable[[sqlite3.Cursor, sqlite3.Connection], Any]

def read_sql(sql_file: Path) -> str: ...

class SqlTemplateLoader(BaseLoader):
    templates_dir: Path
    def __init__(self, templates_dir: Path) -> None: ...
    def get_source(
        self, environment: Environment, template: str
    ) -> Tuple[str, str, Callable[[], bool]]: ...

class SQLite(DB):
    use_in_memory: bool
    vector0_so_path: Optional[str]
    vss0_so_path: Optional[str]
    local_path: Optional[str]
    env: Template
    clause_template: Template
    search_template: Template
    traverse_template: Template
    def __init__(
        self,
        *,
        use_in_memory: bool = False,
        local_path: str | None = None,
        vector0_so_path: str | None = None,
        vss0_so_path: str | None = None,
    ) -> None: ...
    def __eq__(self, other): ...
    def atomic(self, cursor_exec_fn: CursorExecFunction) -> Any: ...
    def save(self) -> None: ...
    def initialize(self): ...
    def all_connected_nodes(
        self, node_or_edge: Node | Edge, limit: int | None = 1
    ) -> Any: ...
    def get_connections(self, identifier: Any) -> CursorExecFunction: ...
    def fetch_node_embed_id(self, node_id: Any, limit: int = 1) -> None: ...
    def fetch_edge_embed_ids(self, id: Any, limit: int = 10): ...
    def search_edge(
        self, source: Any, target: Any, attributes: Dict, limit: int = 1
    ) -> Dict[Any, Any]: ...
    def add_node(self, label: str, attribute: Dict, id: Any): ...
    def add_edge(
        self, source: Any, target: Any, label: str, attributes: Dict
    ) -> None: ...
    def update_node(self, node: Node): ...
    def remove_node(self, id: Any) -> None: ...
    def search_node(self, node_id: Any) -> Any: ...
    def search_node_label(self, node_id: Any, limit: int | None = 1) -> Any: ...
    def traverse(
        self, source: Any, target: Any | None = None, with_bodies: bool = False
    ) -> List: ...
    def fetch_node_id(self, id: Any, limit: int | None = 1): ...
    def find_nodes_by_label(self, label: str, limit: int | None = 1): ...
    def graphviz_visualize(
        self,
        dot_file: str | None = None,
        path: List[Any] = [],
        connections: Any = None,
        format: str = "png",
        exclude_node_keys: List[str] = [],
        hide_node_key: bool = False,
        node_kv: str = " ",
        exclude_edge_keys: List[str] = [],
        hide_edge_key: bool = False,
        edge_kv: str = " ",
    ) -> Digraph: ...
    def fetch_ids_from_db(self, limit: int | None = 10) -> List[str]: ...
    def search_indegree_edges(
        self, target: Any, limit: int | None = 10
    ) -> List[Any]: ...
    def search_outdegree_edges(
        self, source: Any, limit: int | None = 10
    ) -> List[Any]: ...
    def search_similar_nodes(
        self, embed_ids, *, desc: bool | None = False, sort_by: str | None = ""
    ): ...
    def search_similar_edges(
        self, embed_ids, *, desc: bool = False, sort_by: str = ""
    ): ...
    def search_node_type(self, label: str): ...
    def search_id_by_node_type(self, node_type: str): ...
